import React, { useState } from 'react';
import { Card, Button, Form, Alert, Spinner, Badge, Accordion } from 'react-bootstrap';
import VulnerabilityService from '../../services/VulnerabilityService';

/**
 * Code Vulnerability Scanner Component
 * 
 * Allows users to scan code snippets for security vulnerabilities with real-time feedback
 */
const CodeVulnerabilityScanner = () => {
  const [code, setCode] = useState('');
  const [language, setLanguage] = useState('javascript');
  const [results, setResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // Available programming languages for scanning
  const languages = [
    { value: 'javascript', label: 'JavaScript' },
    { value: 'python', label: 'Python' },
    { value: 'java', label: 'Java' },
    { value: 'csharp', label: 'C#' },
    { value: 'php', label: 'PHP' }
  ];
  
  // Function to scan code for vulnerabilities
  const handleScan = async () => {
    if (!code.trim()) {
      setError('Please enter code to scan');
      return;
    }
    
    try {
      setIsLoading(true);
      setError(null);
      
      const analysisResults = await VulnerabilityService.analyzeCode(code, language);
      setResults(analysisResults);
    } catch (err) {
      console.error('Error scanning code:', err);
      setError('Failed to analyze code. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };
  
  // Function to clear results and code
  const handleClear = () => {
    setCode('');
    setResults(null);
    setError(null);
  };
  
  // Function to get severity badge variant
  const getSeverityVariant = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'danger';
      case 'high':
        return 'warning';
      case 'medium':
        return 'info';
      case 'low':
        return 'secondary';
      default:
        return 'primary';
    }
  };
  
  // Generate sample code for demonstration
  const generateSampleCode = () => {
    const samples = {
      javascript: `// Example JavaScript code with SQL injection vulnerability
function authenticateUser(username, password) {
  // WARNING: This is vulnerable to SQL Injection
  const query = "SELECT * FROM users WHERE username = '" + username + 
                "' AND password = '" + password + "'";
                
  database.execute(query);
  
  // This uses DOM manipulation that could lead to XSS
  document.getElementById('welcome').innerHTML = 
    "<h1>Welcome " + username + "!</h1>";
}`,
      python: `# Example Python code with command injection vulnerability
def process_file(filename):
    # WARNING: This is vulnerable to command injection
    import os
    os.system("cat " + filename)
    
    # This SQL query is also vulnerable to injection
    query = "SELECT * FROM files WHERE name = '" + filename + "'"
    db.execute(query)`,
      java: `// Example Java code with path traversal vulnerability
public void readUserFile(String fileName) {
    try {
        // WARNING: This is vulnerable to path traversal
        File file = new File("/user/data/" + fileName);
        BufferedReader reader = new BufferedReader(new FileReader(file));
        
        // This is vulnerable to SQL injection
        String query = "SELECT * FROM documents WHERE filename='" + fileName + "'";
        statement.executeQuery(query);
    } catch (Exception e) {
        e.printStackTrace();
    }
}`,
      php: `<?php
// Example PHP code with multiple vulnerabilities
function displayUser($userId) {
    // WARNING: SQL Injection vulnerability
    $query = "SELECT username, email FROM users WHERE id = " . $userId;
    $result = mysql_query($query);
    
    // WARNING: XSS vulnerability
    echo "<div class='user-info'>Welcome " . $_GET['username'] . "!</div>";
    
    // WARNING: Command injection vulnerability
    system("find /var/www/user_files -name " . $_POST['filename']);
}
?>`,
      csharp: `// Example C# code with security vulnerabilities
public ActionResult ProcessUserInput(string input) {
    // WARNING: SQL Injection vulnerability
    string query = "SELECT * FROM Products WHERE name = '" + input + "'";
    var results = dbContext.Database.SqlQuery<Product>(query).ToList();
    
    // WARNING: Potential XSS vulnerability
    ViewBag.UserInput = input;
    
    // WARNING: Command injection vulnerability
    System.Diagnostics.Process.Start("cmd.exe", "/c dir " + input);
    
    return View(results);
}`
    };
    
    setCode(samples[language] || samples.javascript);
  };

  return (
    <Card className="mb-4">
      <Card.Header className="d-flex justify-content-between align-items-center">
        <h5 className="mb-0">Code Vulnerability Scanner</h5>
        <Button variant="outline-secondary" size="sm" onClick={generateSampleCode}>
          Generate Sample Code
        </Button>
      </Card.Header>
      <Card.Body>
        <Form>
          <Form.Group className="mb-3">
            <Form.Label>Programming Language</Form.Label>
            <Form.Select
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
            >
              {languages.map((lang) => (
                <option key={lang.value} value={lang.value}>
                  {lang.label}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Code to Analyze</Form.Label>
            <Form.Control
              as="textarea"
              rows={10}
              value={code}
              onChange={(e) => setCode(e.target.value)}
              placeholder="Paste your code here..."
              className="code-editor font-monospace"
            />
          </Form.Group>

          <div className="d-flex gap-2">
            <Button
              variant="primary"
              onClick={handleScan}
              disabled={isLoading || !code.trim()}
            >
              {isLoading ? (
                <>
                  <Spinner
                    as="span"
                    animation="border"
                    size="sm"
                    role="status"
                    aria-hidden="true"
                  />{' '}
                  Scanning...
                </>
              ) : (
                'Scan for Vulnerabilities'
              )}
            </Button>
            <Button
              variant="outline-secondary"
              onClick={handleClear}
              disabled={isLoading || (!code.trim() && !results)}
            >
              Clear
            </Button>
          </div>
        </Form>

        {error && (
          <Alert variant="danger" className="mt-3">
            {error}
          </Alert>
        )}

        {results && (
          <div className="mt-4">
            <h5 className="mb-3">Scan Results</h5>
            
            <div className="d-flex gap-2 flex-wrap mb-3">
              <Badge bg="secondary">Total: {results.summary.total}</Badge>
              {results.summary.critical > 0 && (
                <Badge bg="danger">Critical: {results.summary.critical}</Badge>
              )}
              {results.summary.high > 0 && (
                <Badge bg="warning" text="dark">High: {results.summary.high}</Badge>
              )}
              {results.summary.medium > 0 && (
                <Badge bg="info">Medium: {results.summary.medium}</Badge>
              )}
              {results.summary.low > 0 && (
                <Badge bg="secondary">Low: {results.summary.low}</Badge>
              )}
            </div>

            {results.findings.length === 0 ? (
              <Alert variant="success">
                No vulnerabilities detected! Your code looks secure.
              </Alert>
            ) : (
              <Accordion>
                {results.findings.map((finding, index) => (
                  <Accordion.Item key={index} eventKey={index.toString()}>
                    <Accordion.Header>
                      <span className="me-2">
                        <Badge bg={getSeverityVariant(finding.severity)}>
                          {finding.severity.toUpperCase()}
                        </Badge>
                      </span>
                      <span>{finding.name}</span>
                      <span className="text-muted ms-2">
                        (Line{finding.lines.length > 1 ? 's' : ''}: {finding.lines.join(', ')})
                      </span>
                    </Accordion.Header>
                    <Accordion.Body>
                      <div className="mb-3">
                        <strong>Description:</strong>
                        <p>{finding.description}</p>
                      </div>
                      <div>
                        <strong>Remediation:</strong>
                        <p>{finding.remediation}</p>
                      </div>
                    </Accordion.Body>
                  </Accordion.Item>
                ))}
              </Accordion>
            )}
          </div>
        )}
      </Card.Body>
    </Card>
  );
};

export default CodeVulnerabilityScanner;
